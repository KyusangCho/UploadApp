@using System.Threading;
@using Microsoft.AspNetCore.Http;
@using Syncfusion.Blazor.ProgressBar;
@using Syncfusion.Blazor;

@namespace BlazorDemos.Shared

@implements IDisposable;
@inject IJSRuntime JsRuntime;
@inject SampleService SampleService;
@inject IHttpContextAccessor HttpContextAccessor;

<div class="@carouselClass">
    <div class="@containerClass" style=@("transform: translate3d(" + xValue.ToString() + "%, 0px, 0px);")>
        @{ var selectedIndex = dataSource.IndexOf(selectedItem); }
        @foreach (var data in dataSource.Select((value, index) => (value, index)))
        {
            var item = data.value;
            var cloneClass = SampleUtils.CAROUSEL_ITEM;
            if (EqualityComparer<CarouselItem>.Default.Equals(item, selectedItem))
            {
                cloneClass += SampleUtils.SPACE + SampleUtils.CAROUSEL_SELECTED;
            }
            var left = data.index * leftIncreament;
            if (selectedIndex == dataCount && data.index == 0)
            {
                left = (selectedIndex * leftIncreament) + leftIncreament;
            }
            if (selectedIndex == 0 && data.index == dataCount)
            {
                left = selectedIndex - leftIncreament;
            }
            <div class=@cloneClass style="@("left: " + left + "%")">
                <div>
                    <a href="@item.HyperLink">
                        @if (!isPrerendering)
                        {
                            <img class="@SampleUtils.CAROUSEL_IMAGE" alt="@item.Header" src="@item.ImagePath" />
                        }
                    </a>
                </div>
                <div class="@SampleUtils.CAROUSEL_CONTENT_AREA">
                    <table>
                        <tr>
                            <th>
                                <div class="@SampleUtils.CAROUSEL_HEADER">@item.Header</div>
                            </th>
                        </tr>
                        <tr>
                            <th>
                                <div class="@SampleUtils.CAROUSEL_CONTENT">@item.Content</div>
                            </th>
                        </tr>
                    </table>
                </div>
            </div>
        }
    </div>
    @if (!SampleService.IsDevice)
    {
        <button class="@SampleUtils.CAROUSEL_PREVIOUS_BUTTON" aria-label="Previous" @onclick="OnPrevNavigation"></button>
        <button class="@SampleUtils.CAROUSEL_NEXT_BUTTON" aria-label="Next" @onclick="OnNextNavigation"></button>
    }
</div>
<div class="@SampleUtils.CAROUSEL_PROGRESS">
    <SfProgressBar @ref="ProgressBarRef" Type="ProgressType.Linear" Height="5" CornerRadius="CornerType.Round"
                   ProgressThickness="5" Value="100" Minimum="0" Maximum="100" Theme="Theme.Bootstrap4">
        <ProgressBarAnimation Enable="true" Duration="@DURATION" Delay="0" />
    </SfProgressBar>
</div>

@code {

    const int DURATION = 5000;

    private int xValue;
    private int dataCount;
    private int initXValue;
    private bool isDisposed;
    private int leftIncreament;
    private bool isPrerendering;
    private string carouselClass;
    private string containerClass;
    private CarouselItem lastItem;
    private CarouselItem firstItem;
    private CarouselItem selectedItem;
    private List<CarouselItem> dataSource;
    private CancellationTokenSource taskToken;

    protected SfProgressBar ProgressBarRef { get; set; }

    private async Task Rotate(bool isPrev = false)
    {
        if (!isDisposed && !taskToken.IsCancellationRequested)
        {
            await SwitchItem(isPrev);
        }
    }

    private async Task SwitchItem(bool isPrev = false)
    {
        // Set device mode configuration for window resize.
        if (SampleService.IsDevice)
        {
            initXValue = 0;
            leftIncreament = 0;
            xValue = initXValue;
        }
        else
        {
            xValue += isPrev ? leftIncreament : -Math.Abs(leftIncreament);
        }
        if (EqualityComparer<CarouselItem>.Default.Equals(lastItem, selectedItem) && !isPrev)
        {
            selectedItem = firstItem;
            xValue = initXValue;
        }
        else if (EqualityComparer<CarouselItem>.Default.Equals(firstItem, selectedItem) && isPrev)
        {
            selectedItem = lastItem;
            xValue = initXValue - (leftIncreament * dataCount);
        }
        else
        {
            var prevSelectedIndex = dataSource.IndexOf(selectedItem);
            var selectedIndex = isPrev ? prevSelectedIndex - 1 : prevSelectedIndex + 1;
            selectedItem = dataSource.ElementAt(selectedIndex);
        }
        StateHasChanged();
#pragma warning disable CS0618
        await ProgressBarRef.Refresh();
#pragma warning restore CS0618
        await Task.Delay(DURATION, taskToken.Token);
        await Rotate();
    }

    private async Task OnPrevNavigation()
    {
        taskToken.Cancel();
        taskToken = new CancellationTokenSource();
        await Rotate(true);
    }

    private async Task OnNextNavigation()
    {
        taskToken.Cancel();
        taskToken = new CancellationTokenSource();
        await Rotate();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        isPrerendering = !HttpContextAccessor.HttpContext.Response.HasStarted;
        var imagePath = SampleService.ShowCaseImagePath;
        dataSource = new List<CarouselItem>() {
            new CarouselItem("Appointment Planner", "An appointment scheduling application for doctors in a clinic to manage their appointments with patients.", imagePath + "appointment-planner.png", "https://blazor.syncfusion.com/showcase/wasm/appointment-planner/"),
            new CarouselItem("Expense Tracker", "Track and visualize your daily expenses in a handy way with great UI.", imagePath + "expense-tracker.png", "https://blazor.syncfusion.com/showcase/wasm/expensetracker/"),
            new CarouselItem("Health Tracker", "Track and visualize the calories consumed and daily activities like steps taken, water consumption and sleeping duration.", imagePath + "health-tracker.png", "https://blazor.syncfusion.com/showcase/wasm/health-tracker/"),
            new CarouselItem("Document Explorer", "Manage the file system that allows users to perform most common file operations like accessing, editing, and sorting files or folders and also opens Word, RTF, Text, PowerPoint and PDF documents.", imagePath + "document-explorer.png", "https://blazor.syncfusion.com/showcase/documentexplorer/"),
            new CarouselItem("Diagram Builder", "Diagram Builder is a web application which is used to create the diagrams like Flow Chart,  process diagrams and more.", imagePath + "diagram-builder.png", "https://blazor.syncfusion.com/showcase/diagrambuilder/")
        };
        dataCount = dataSource.Count - 1;
        firstItem = dataSource.First();
        lastItem = dataSource.Last();
        selectedItem = firstItem;
        carouselClass = SampleUtils.CAROUSEL + SampleUtils.SPACE + SampleUtils.HIDDEN;
        containerClass = SampleUtils.CAROUSEL_CONTAINER + SampleUtils.SPACE + SampleUtils.CAROUSEL_TRANSITION;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var model = await this.JsRuntime.InvokeAsync<CarouselModel>("sfBlazorSB.getCarouselModel");

            if (model.IsDevice)
            {
                SampleService.IsDevice = model.IsDevice;
                initXValue = 0;
                leftIncreament = 0;
            }
            else
            {
                initXValue = model.XValue;
                leftIncreament = model.LeftValue;
            }
            xValue = initXValue;
            carouselClass = SampleUtils.RemoveClass(carouselClass, SampleUtils.HIDDEN);
            StateHasChanged();
            taskToken = new CancellationTokenSource();
            await Rotate();
        }
    }

    public void Dispose()
    {
        isDisposed = true;
        selectedItem = null;
        dataSource = null;
        taskToken?.Dispose();
    }
}
